"""
Admin command handlers for the PriceGuard bot.
File: src/bot/handlers/admin.py
"""

from datetime import datetime
from typing import List

from aiogram import Router, F, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from core.config import Settings
from core.database import Database
from bot.keyboards.admin import (
    get_admin_keyboard,
    get_users_keyboard,
    get_subscriptions_keyboard
)
from bot.utils.messages import format_user_info, format_subscription_info

router = Router()

class AdminStates(StatesGroup):
    """Admin FSM states."""
    waiting_for_broadcast = State()
    waiting_for_force_check = State()

async def is_admin(user_id: int, settings: Settings) -> bool:
    """Check if user is admin."""
    print(f"Checking admin access: user_id={user_id} ({type(user_id)}), admin_id={settings.telegram.admin_user_id} ({type(settings.telegram.admin_user_id)})")
    return str(user_id) == str(settings.telegram.admin_user_id)

@router.message(Command("admin"))
async def cmd_admin(message: types.Message, settings: Settings):
    """Admin menu handler."""
    if not await is_admin(message.from_user.id, settings):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    await message.answer(
        "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=get_admin_keyboard()
    )

@router.message(Command("users"))
async def cmd_users(message: types.Message, db: Database, settings: Settings):
    """Users list handler."""
    if not await is_admin(message.from_user.id, settings):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    users = await db.get_all_users()
    if not users:
        await message.answer("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç")
        return

    text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user in users:
        text += format_user_info(user) + "\n"

    await message.answer(
        text,
        reply_markup=get_users_keyboard()
    )

@router.message(Command("subscriptions"))
async def cmd_subscriptions(
    message: types.Message,
    db: Database,
    settings: Settings
):
    """Subscriptions list handler."""
    if not await is_admin(message.from_user.id, settings):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    subscriptions = await db.get_all_subscriptions()
    if not subscriptions:
        await message.answer("üí≥ –ü–æ–¥–ø–∏—Å–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç")
        return

    text = "üí≥ –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫:\n\n"
    for sub in subscriptions:
        text += format_subscription_info(sub) + "\n"

    await message.answer(
        text,
        reply_markup=get_subscriptions_keyboard()
    )

@router.message(Command("logs"))
async def cmd_logs(message: types.Message, settings: Settings):
    """Send bot logs."""
    if not await is_admin(message.from_user.id, settings):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    try:
        with open("bot.log", "r") as f:
            logs = f.read()[-4000:]  # Last 4000 chars
        await message.answer_document(
            types.BufferedInputFile(
                logs.encode(),
                filename=f"bot_logs_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            )
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {str(e)}")

@router.message(Command("broadcast"))
async def cmd_broadcast(message: types.Message, state: FSMContext, settings: Settings):
    """Start broadcast message handler."""
    if not await is_admin(message.from_user.id, settings):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    await state.set_state(AdminStates.waiting_for_broadcast)
    await message.answer(
        "üì¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel"
    )

@router.message(Command("force_check"))
async def cmd_force_check(
    message: types.Message,
    state: FSMContext,
    settings: Settings
):
    """Force check promotions handler."""
    if not await is_admin(message.from_user.id, settings):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    await state.set_state(AdminStates.waiting_for_force_check)
    await message.answer(
        "üîÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ü–∏–π\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel"
    )

@router.message(AdminStates.waiting_for_broadcast)
async def process_broadcast(
    message: types.Message,
    state: FSMContext,
    db: Database
):
    """Process broadcast message."""
    users = await db.get_all_users()
    sent_count = 0
    failed_count = 0

    for user in users:
        try:
            await message.copy_to(user.id)
            sent_count += 1
        except Exception:
            failed_count += 1

    await state.clear()
    await message.answer(
        f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {sent_count}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {failed_count}"
    )

@router.message(AdminStates.waiting_for_force_check)
async def process_force_check(
    message: types.Message,
    state: FSMContext,
    db: Database
):
    """Process force check request."""
    try:
        user_id = int(message.text)
        user = await db.get_user(user_id)
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # TODO: Implement force check logic
        await message.answer(
            f"‚úÖ –ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    finally:
        await state.clear()

# Callback handlers
@router.callback_query(F.data == "admin_users")
async def on_admin_users(callback: types.CallbackQuery, settings: Settings):
    """Handle admin_users callback."""
    if not await is_admin(callback.from_user.id, settings):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    await callback.message.edit_text(
        "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏",
        reply_markup=get_users_keyboard()
    )

@router.callback_query(F.data == "admin_subscriptions")
async def on_admin_subscriptions(callback: types.CallbackQuery, settings: Settings):
    """Handle admin_subscriptions callback."""
    if not await is_admin(callback.from_user.id, settings):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    await callback.message.edit_text(
        "üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏",
        reply_markup=get_subscriptions_keyboard()
    )

@router.callback_query(F.data == "admin_broadcast")
async def on_admin_broadcast(callback: types.CallbackQuery, state: FSMContext, settings: Settings):
    """Handle admin_broadcast callback."""
    if not await is_admin(callback.from_user.id, settings):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    await state.set_state(AdminStates.waiting_for_broadcast)
    await callback.message.edit_text(
        "üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=None
    )

@router.callback_query(F.data == "admin_stats")
async def on_admin_stats(callback: types.CallbackQuery, db: Database, settings: Settings):
    """Handle admin_stats callback."""
    if not await is_admin(callback.from_user.id, settings):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    # TODO: Implement statistics gathering
    await callback.answer("üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

@router.callback_query(F.data == "admin_logs")
async def on_admin_logs(callback: types.CallbackQuery, settings: Settings):
    """Handle admin_logs callback."""
    if not await is_admin(callback.from_user.id, settings):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    await callback.message.delete()
    await cmd_logs(callback.message, settings)

@router.callback_query(F.data == "admin_force_check")
async def on_admin_force_check(callback: types.CallbackQuery, state: FSMContext, settings: Settings):
    """Handle admin_force_check callback."""
    if not await is_admin(callback.from_user.id, settings):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return
    await state.set_state(AdminStates.waiting_for_force_check)
    await callback.message.edit_text(
        "üîÑ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ü–∏–π:",
        reply_markup=None
    )
