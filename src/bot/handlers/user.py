"""
User command handlers for the PriceGuard bot.
File: src/bot/handlers/user.py
"""

from datetime import datetime, timedelta
from typing import Dict, Optional

from aiogram import Router, F, Bot
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, BotCommand, BotCommandScopeDefault

from core.database import Database
from core.logging import get_logger
from services.marketplaces.factory import MarketplaceFactory
from ..utils.messages import (
    format_start_message,
    format_help_message,
    format_subscription_status,
    format_api_instructions,
    START_MESSAGE,
    HOW_IT_WORKS_MESSAGE,
    START_SETUP_MESSAGE,
    OZON_API_KEY_INSTRUCTION,
    WILDBERRIES_API_KEY_INSTRUCTION,
    SETUP_COMPLETE_MESSAGE,
    MENU_MESSAGE
)
from ..keyboards.user import (
    get_start_keyboard,
    get_settings_keyboard,
    get_api_key_keyboard,
    get_confirmation_keyboard,
    get_main_menu_keyboard
)
from ..keyboards.payment import (
    get_subscription_keyboard,
    get_subscription_plans_keyboard
)

router = Router()
logger = get_logger(__name__)

class UserStates(StatesGroup):
    """User state machine for conversation handling."""
    waiting_for_ozon_api = State()
    waiting_for_wb_api = State()
    waiting_for_interval = State()
    waiting_for_confirmation = State()
    waiting_for_ozon_key = State()
    waiting_for_wb_key = State()

async def setup_bot_commands(bot: Bot):
    """Setup bot commands."""
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="menu", description="–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="help", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
        BotCommand(command="status", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏"),
        BotCommand(command="add_api", description="–î–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á–∏"),
        BotCommand(command="interval", description="–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏"),
        BotCommand(command="delete", description="–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ")
    ]
    await bot.set_my_commands(commands, scope=BotCommandScopeDefault())

@router.message(Command("start"))
async def cmd_start(message: Message, db: Database):
    """Handle /start command."""
    user = await db.get_user(message.from_user.id)
    if not user:
        await db.add_user(message.from_user.id)
    
    await message.answer(
        text=format_start_message(is_registered=bool(user)),
        reply_markup=get_start_keyboard()
    )

@router.callback_query(F.data == "how_it_works")
async def process_how_it_works(callback: CallbackQuery):
    """Handle 'How it works' button press."""
    await callback.message.edit_text(
        text=HOW_IT_WORKS_MESSAGE,
        reply_markup=get_start_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "start_setup")
async def process_start_setup(callback: CallbackQuery):
    """Handle 'Start setup' button press."""
    await callback.message.edit_text(
        text=START_SETUP_MESSAGE,
        reply_markup=get_api_key_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "add_ozon_key")
async def process_add_ozon_key(callback: CallbackQuery, state: FSMContext):
    """Handle Ozon API key addition."""
    await state.set_state(UserStates.waiting_for_ozon_key)
    await callback.message.edit_text(
        text=OZON_API_KEY_INSTRUCTION,
        reply_markup=get_api_key_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "add_wb_key")
async def process_add_wb_key(callback: CallbackQuery, state: FSMContext):
    """Handle Wildberries API key addition."""
    await state.set_state(UserStates.waiting_for_wb_key)
    await callback.message.edit_text(
        text=WILDBERRIES_API_KEY_INSTRUCTION,
        reply_markup=get_api_key_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_main")
async def process_back_to_main(callback: CallbackQuery):
    """Handle back to main menu button press."""
    await callback.message.edit_text(
        text=START_MESSAGE,
        reply_markup=get_start_keyboard()
    )
    await callback.answer()

@router.message(Command("help"))
async def cmd_help(message: Message) -> None:
    """Handle /help command."""
    await message.answer(format_help_message())

@router.message(Command("status"))
async def cmd_status(message: Message, db: Database) -> None:
    """Handle /status command."""
    user_data = await db.get_user(message.from_user.id)
    if not user_data:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
        
    await message.answer(
        format_subscription_status(user_data),
        reply_markup=get_subscription_keyboard()
    )

@router.message(Command("settings"))
async def cmd_settings(message: Message, db: Database) -> None:
    """Handle /settings command."""
    user_data = await db.get_user(message.from_user.id)
    if not user_data:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
        
    await message.answer(
        "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ü–∏–π:",
        reply_markup=get_settings_keyboard()
    )

@router.message(Command("add_api"))
async def cmd_add_api(message: Message, db: Database) -> None:
    """Handle /add_api command."""
    user_data = await db.get_user(message.from_user.id)
    if not user_data:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
        
    await message.answer(
        "üîë –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞:",
        reply_markup=get_api_key_keyboard()
    )

@router.callback_query(F.data == "add_ozon_api")
async def process_add_ozon_api(callback: CallbackQuery, state: FSMContext) -> None:
    """Handle Ozon API key addition."""
    await callback.message.edit_text(
        format_api_instructions("ozon"),
        reply_markup=None
    )
    await state.set_state(UserStates.waiting_for_ozon_api)
    await callback.answer()

@router.callback_query(F.data == "add_wb_api")
async def process_add_wb_api(callback: CallbackQuery, state: FSMContext) -> None:
    """Handle Wildberries API key addition."""
    await callback.message.edit_text(
        format_api_instructions("wildberries"),
        reply_markup=None
    )
    await state.set_state(UserStates.waiting_for_wb_api)
    await callback.answer()

@router.message(UserStates.waiting_for_ozon_api)
async def process_ozon_api_key(
    message: Message,
    state: FSMContext,
    db: Database,
    marketplace_factory: MarketplaceFactory
) -> None:
    """Process Ozon API key submission."""
    try:
        # Parse client_id and api_key
        client_id, api_key = message.text.strip().split(":")
        
        await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é API –∫–ª—é—á...")
        
        # Create client directly for validation
        async with OzonClient(api_key=api_key, client_id=client_id) as client:
            is_valid = await client.validate_api_key()
            
        if is_valid:
            # Encrypt and save API key only if valid
            encrypted_key = marketplace_factory.encrypt_api_key(api_key)
            await db.update_api_keys(
                message.from_user.id,
                ozon_key=encrypted_key
            )
            
            await message.answer(
                "‚úÖ API –∫–ª—é—á Ozon —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "1Ô∏è‚É£ –î–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á Wildberries –≤ —Ä–∞–∑–¥–µ–ª–µ üîë API –∫–ª—é—á–∏\n"
                "2Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ ‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
                "3Ô∏è‚É£ –ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ü–∏–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ üìä –ú–æ–∏ –∞–∫—Ü–∏–∏",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á –∏–ª–∏ Client ID\n\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                "1. –í—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ Client ID –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ Ozon\n"
                "2. API –∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω –∏ –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞\n"
                "3. –§–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç: CLIENT_ID:API_KEY\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É Ozon",
                reply_markup=get_main_menu_keyboard()
            )
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: CLIENT_ID:API_KEY\n"
            "–ü—Ä–∏–º–µ—Ä: 12345:a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6\n\n"
            "–ì–¥–µ:\n"
            "- CLIENT_ID: ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ Ozon\n"
            "- API_KEY: –ö–ª—é—á API –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ 'API –∫–ª—é—á–∏'",
            reply_markup=get_main_menu_keyboard()
        )
    except Exception as e:
        logger.error(f"Error processing Ozon API key: {str(e)}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API –∫–ª—é—á–∞\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:\n"
            "1. –£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ API Ozon\n"
            "2. API –∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω\n"
            "3. –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤–µ—Ä–Ω—ã–π: CLIENT_ID:API_KEY",
            reply_markup=get_main_menu_keyboard()
        )
    finally:
        await state.clear()

@router.message(UserStates.waiting_for_wb_api)
async def process_wb_api_key(
    message: Message,
    state: FSMContext,
    db: Database,
    marketplace_factory: MarketplaceFactory
) -> None:
    """Process Wildberries API key submission."""
    try:
        api_key = message.text.strip()
        
        await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é API –∫–ª—é—á...")
        
        # Create client directly for validation
        async with WildberriesClient(api_key=api_key) as client:
            is_valid = await client.validate_api_key()
            
        if is_valid:
            # Encrypt and save API key only if valid
            encrypted_key = marketplace_factory.encrypt_api_key(api_key)
            await db.update_api_keys(
                message.from_user.id,
                wildberries_key=encrypted_key
            )
            
            await message.answer(
                "‚úÖ API –∫–ª—é—á Wildberries —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "1Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ ‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏\n"
                "2Ô∏è‚É£ –ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ü–∏–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ üìä –ú–æ–∏ –∞–∫—Ü–∏–∏",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á\n\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                "1. –í—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ API –∫–ª—é—á –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ Wildberries\n"
                "2. API –∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω –∏ –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞\n"
                "3. –ö–ª—é—á –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É Wildberries",
                reply_markup=get_main_menu_keyboard()
            )
    except Exception as e:
        logger.error(f"Error processing Wildberries API key: {str(e)}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API –∫–ª—é—á–∞\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:\n"
            "1. –£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ API Wildberries\n"
            "2. API –∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω\n"
            "3. –ö–ª—é—á –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤",
            reply_markup=get_main_menu_keyboard()
        )
    finally:
        await state.clear()

@router.callback_query(F.data == "settings")
async def process_settings(callback: CallbackQuery):
    """Handle settings button press."""
    await callback.message.edit_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ü–∏–π:",
        reply_markup=get_settings_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("interval:"))
async def process_interval_change(callback: CallbackQuery, db: Database):
    """Handle interval change."""
    hours = int(callback.data.split(":")[1])
    
    try:
        await db.update_check_interval(callback.from_user.id, hours)
        await callback.message.edit_text(
            f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: –∫–∞–∂–¥—ã–µ {hours} {'—á–∞—Å' if hours == 1 else '—á–∞—Å–∞' if 2 <= hours <= 4 else '—á–∞—Å–æ–≤'}",
            reply_markup=get_main_menu_keyboard()
        )
    except Exception as e:
        await callback.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )
    
    await callback.answer()

@router.callback_query(F.data == "back_to_main")
async def process_back_to_main(callback: CallbackQuery) -> None:
    """Handle back to main menu."""
    await callback.message.edit_text(
        format_start_message(True),
        reply_markup=get_start_keyboard()
    )
    await callback.answer()

@router.message(Command("unsubscribe"))
async def cmd_unsubscribe(message: Message, db: Database) -> None:
    """Handle /unsubscribe command."""
    user_data = await db.get_user(message.from_user.id)
    if not user_data:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
        
    await message.answer(
        "‚ùóÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=get_confirmation_keyboard()
    )

@router.message(Command("delete_data"))
async def cmd_delete_data(message: Message, state: FSMContext) -> None:
    """Handle /delete_data command."""
    await message.answer(
        "‚ùóÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=get_confirmation_keyboard()
    )
    await state.set_state(UserStates.waiting_for_confirmation)
    await state.update_data(action="delete_data")

@router.callback_query(F.data == "subscribe")
async def process_subscribe(callback: CallbackQuery) -> None:
    """Handle subscription request."""
    await callback.message.edit_text(
        "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_subscription_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "pay_subscription")
async def process_payment(callback: CallbackQuery, db: Database) -> None:
    """Handle payment request."""
    await callback.message.edit_text(
        "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
        "1Ô∏è‚É£ –ú–µ—Å—è—Ü - 299‚ÇΩ\n"
        "3Ô∏è‚É£ –ú–µ—Å—è—Ü–∞ - 799‚ÇΩ\n"
        "6Ô∏è‚É£ –ú–µ—Å—è—Ü–µ–≤ - 1499‚ÇΩ\n"
        "1Ô∏è‚É£2Ô∏è‚É£ –ú–µ—Å—è—Ü–µ–≤ - 2699‚ÇΩ",
        reply_markup=get_subscription_plans_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "cancel_subscription")
async def process_cancel_subscription(
    callback: CallbackQuery,
    db: Database
) -> None:
    """Handle subscription cancellation."""
    try:
        await db.update_subscription(
            callback.from_user.id,
            status="inactive",
            end_date=datetime.now()
        )
        await callback.message.edit_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    await callback.answer()

@router.callback_query(F.data == "confirm")
async def process_confirmation(
    callback: CallbackQuery,
    state: FSMContext,
    db: Database
) -> None:
    """Handle confirmation of dangerous actions."""
    current_state = await state.get_state()
    if current_state == UserStates.waiting_for_confirmation:
        state_data = await state.get_data()
        action = state_data.get("action")
        
        if action == "delete_data":
            try:
                await db.delete_user(callback.from_user.id)
                await callback.message.edit_text(
                    "‚úÖ –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã"
                )
            except Exception as e:
                await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        
        await state.clear()
    await callback.answer()

@router.callback_query(F.data == "cancel")
async def process_cancellation(
    callback: CallbackQuery,
    state: FSMContext
) -> None:
    """Handle cancellation of dangerous actions."""
    await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await state.clear()
    await callback.answer()

@router.message(Command("menu"))
async def cmd_menu(message: Message, db: Database):
    """Show main menu."""
    user_data = await db.get_user(message.from_user.id)
    if not user_data:
        await db.add_user(message.from_user.id)
    
    await message.answer(
        "ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é PriceGuard\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )

@router.callback_query(F.data == "my_promotions")
async def show_promotions(callback: CallbackQuery, db: Database):
    """Show user's promotions."""
    user_data = await db.get_user(callback.from_user.id)
    if not user_data:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á–∏", show_alert=True)
        return
    
    # TODO: Implement promotions display
    await callback.message.edit_text(
        "üìä –í–∞—à–∏ –∞–∫—Ü–∏–∏\n\n"
        "üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
        reply_markup=get_main_menu_keyboard()
    )

@router.callback_query(F.data == "settings")
async def show_settings(callback: CallbackQuery):
    """Show settings menu."""
    await callback.message.edit_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=get_settings_keyboard()
    )

@router.callback_query(F.data == "subscription")
async def show_subscription(callback: CallbackQuery, db: Database):
    """Show subscription info."""
    user_data = await db.get_user(callback.from_user.id)
    if not user_data:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    status_text = await format_subscription_status(user_data)
    await callback.message.edit_text(
        status_text,
        reply_markup=get_subscription_keyboard()
    )

@router.callback_query(F.data == "api_keys")
async def show_api_keys(callback: CallbackQuery):
    """Show API keys management."""
    await callback.message.edit_text(
        "üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞–º–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=get_api_key_keyboard()
    )

@router.callback_query(F.data == "check_interval")
async def show_check_interval(callback: CallbackQuery):
    """Show check interval settings."""
    await callback.message.edit_text(
        "‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ü–∏–π\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∞–∫—Ü–∏–∏:",
        reply_markup=get_settings_keyboard()
    )

@router.callback_query(F.data == "help")
async def show_help(callback: CallbackQuery):
    """Show help message."""
    help_text = format_help_message()
    await callback.message.edit_text(
        help_text,
        reply_markup=get_main_menu_keyboard()
    )
