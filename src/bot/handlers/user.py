"""
User command handlers for the PriceGuard bot.
File: src/bot/handlers/user.py
"""

from datetime import datetime, timedelta
from typing import Dict, Optional, Union

from aiogram import Router, F, Bot
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, BotCommand, BotCommandScopeDefault
from aiogram.exceptions import TelegramBadRequest

from core.database import Database
from core.logging import get_logger
from services.marketplaces.factory import MarketplaceFactory
from bot.utils.messages import (
    format_help_message,
    format_subscription_status,
    format_api_keys_message
)
from ..utils.messages import (
    format_start_message,
    START_MESSAGE,
    HOW_IT_WORKS_MESSAGE,
    START_SETUP_MESSAGE,
    OZON_API_KEY_INSTRUCTION,
    WILDBERRIES_API_KEY_INSTRUCTION,
    SETUP_COMPLETE_MESSAGE,
    MENU_MESSAGE
)
from ..keyboards.user import (
    get_start_keyboard,
    get_settings_keyboard,
    get_api_key_keyboard,
    get_confirmation_keyboard,
    get_main_menu_keyboard
)
from ..keyboards.payment import (
    get_subscription_keyboard,
    get_subscription_plans_keyboard
)

router = Router()
logger = get_logger(__name__)

class UserStates(StatesGroup):
    """User state machine for conversation handling."""
    waiting_for_ozon_api = State()
    waiting_for_wb_api = State()
    waiting_for_interval = State()
    waiting_for_confirmation = State()

async def setup_bot_commands(bot: Bot):
    """Setup bot commands."""
    commands = [
        BotCommand(command="menu", description="–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="status", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏"),
        BotCommand(command="settings", description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"),
        BotCommand(command="add_api", description="–î–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á–∏"),
        BotCommand(command="help", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
    ]
    await bot.set_my_commands(commands)

@router.message(Command("start"))
async def cmd_start(message: Message, db: Database):
    """Handle /start command."""
    user = await db.get_user(message.from_user.id)
    if not user:
        await db.add_user(message.from_user.id)
    
    await message.answer(
        text=format_start_message(is_registered=bool(user)),
        reply_markup=get_start_keyboard()
    )

@router.callback_query(F.data == "how_it_works")
async def process_how_it_works(callback: CallbackQuery):
    """Handle 'How it works' button press."""
    await callback.message.edit_text(
        text=HOW_IT_WORKS_MESSAGE,
        reply_markup=get_start_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "start_setup")
async def process_start_setup(callback: CallbackQuery):
    """Handle 'Start setup' button press."""
    await callback.message.edit_text(
        text=START_SETUP_MESSAGE,
        reply_markup=get_api_key_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "add_ozon_key")
async def process_add_ozon_key(callback: CallbackQuery, state: FSMContext):
    """Handle Ozon API key addition."""
    try:
        await state.set_state(UserStates.waiting_for_ozon_api)
        await callback.message.edit_text(
            text=OZON_API_KEY_INSTRUCTION,
            reply_markup=get_api_key_keyboard()
        )
    except TelegramBadRequest as e:
        if "message is not modified" not in str(e):
            raise
    await callback.answer()

@router.callback_query(F.data == "add_wb_key")
async def process_add_wb_key(callback: CallbackQuery, state: FSMContext):
    """Handle Wildberries API key addition."""
    await state.set_state(UserStates.waiting_for_wb_api)
    await callback.message.edit_text(
        text=WILDBERRIES_API_KEY_INSTRUCTION,
        reply_markup=get_api_key_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "back_to_main")
async def process_back_to_main(callback: CallbackQuery):
    """Handle back to main menu button press."""
    await callback.message.edit_text(
        text=START_MESSAGE,
        reply_markup=get_start_keyboard()
    )
    await callback.answer()

@router.message(Command("help"))
async def cmd_help(message: Message) -> None:
    """Handle /help command."""
    await message.answer(format_help_message())

@router.message(Command("status"))
async def cmd_status(message: Message, db: Database) -> None:
    """Handle /status command."""
    user_data = await db.get_user(message.from_user.id)
    if not user_data:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
        
    await message.answer(
        await format_subscription_status(user_data),
        reply_markup=get_subscription_keyboard()
    )

@router.message(Command("settings"))
async def cmd_settings(message: Message, db: Database) -> None:
    """Handle /settings command."""
    user_data = await db.get_user(message.from_user.id)
    if not user_data:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
        
    await message.answer(
        "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ü–∏–π:",
        reply_markup=get_settings_keyboard()
    )

@router.message(Command("add_api"))
async def cmd_add_api(message: Message, db: Database) -> None:
    """Handle /add_api command."""
    user_data = await db.get_user(message.from_user.id)
    if not user_data:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
        
    await message.answer(
        "üîë –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è API –∫–ª—é—á–∞:",
        reply_markup=get_api_key_keyboard()
    )

@router.callback_query(F.data == "add_ozon_api")
async def process_add_ozon_api(callback: CallbackQuery, state: FSMContext) -> None:
    """Handle Ozon API key addition."""
    await callback.message.edit_text(
        format_api_instructions("ozon"),
        reply_markup=None
    )
    await state.set_state(UserStates.waiting_for_ozon_api)
    await callback.answer()

@router.callback_query(F.data == "add_wb_api")
async def process_add_wb_api(callback: CallbackQuery, state: FSMContext) -> None:
    """Handle Wildberries API key addition."""
    await callback.message.edit_text(
        format_api_instructions("wildberries"),
        reply_markup=None
    )
    await state.set_state(UserStates.waiting_for_wb_api)
    await callback.answer()

@router.message(UserStates.waiting_for_ozon_api)
async def process_ozon_api_key(
    message: Message,
    state: FSMContext,
    db: Database,
    marketplace_factory: MarketplaceFactory
) -> None:
    """Process Ozon API key submission."""
    try:
        api_key = message.text.strip()
        if not api_key:
            await message.answer("‚ùå API –∫–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
            
        parts = api_key.split(':')
        if len(parts) != 2:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ CLIENT_ID:API_KEY"
            )
            return
            
        client_id, api_key = parts
        logger.info(f"Parsed API key - Client ID: {client_id}, Key length: {len(api_key)}")
        
        await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é API –∫–ª—é—á...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–ª—é—á–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        logger.info("Creating Ozon client for validation")
        client = await marketplace_factory.create_client(
            'ozon', api_key, client_id=client_id, is_encrypted=False
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–ª—é—á–∞
        logger.info("Starting API key validation")
        async with client:
            is_valid = await client.validate_api_key()
            logger.info(f"API key validation result: {is_valid}")
            if not is_valid:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
                return
        
        # –ï—Å–ª–∏ –∫–ª—é—á –≤–∞–ª–∏–¥–Ω—ã–π, —à–∏—Ñ—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        logger.info("Encrypting API key")
        encrypted_key = marketplace_factory.encrypt_api_key(api_key)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º API –∫–ª—é—á –∏ client_id –≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        logger.info("Saving API credentials to database")
        async with db.db.execute(
            """
            UPDATE users 
            SET ozon_api_key = ?,
                ozon_client_id = ?
            WHERE user_id = ?
            """,
            (encrypted_key, client_id, message.from_user.id)
        ):
            await db.db.commit()
            
        await message.answer(
            "‚úÖ API –∫–ª—é—á Ozon —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "1Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "2Ô∏è‚É£ –ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ü–∏–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ üìä –ú–æ–∏ –∞–∫—Ü–∏–∏",
            reply_markup=get_main_menu_keyboard()
        )
        await show_api_keys_message(message, db)
        
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {str(e)}")
    except Exception as e:
        logger.error(f"Error adding Ozon API key: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ API –∫–ª—é—á–∞")
    finally:
        await state.clear()

@router.message(UserStates.waiting_for_wb_api)
async def process_wb_api_key(
    message: Message,
    state: FSMContext,
    db: Database,
    marketplace_factory: MarketplaceFactory
) -> None:
    """Process Wildberries API key submission."""
    try:
        api_key = message.text.strip()
        if not api_key:
            await message.answer("‚ùå API –∫–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        
        await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é API –∫–ª—é—á...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Å –Ω–µ–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–ª—é—á–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        client = await marketplace_factory.create_client(
            'wildberries', api_key, is_encrypted=False
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–ª—é—á–∞
        async with client:
            is_valid = await client.validate_api_key()
            if not is_valid:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
                return
        
        # –ï—Å–ª–∏ –∫–ª—é—á –≤–∞–ª–∏–¥–Ω—ã–π, —à–∏—Ñ—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        encrypted_key = marketplace_factory.encrypt_api_key(api_key)
        await db.update_api_keys(
            message.from_user.id,
            wildberries_key=encrypted_key
        )
        
        await message.answer(
            "‚úÖ API –∫–ª—é—á Wildberries —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "1Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "2Ô∏è‚É£ –ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ü–∏–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ üìä –ú–æ–∏ –∞–∫—Ü–∏–∏",
            reply_markup=get_main_menu_keyboard()
        )
        await show_api_keys_message(message, db)
        
    except Exception as e:
        logger.error(f"Error processing Wildberries API key: {str(e)}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API –∫–ª—é—á–∞\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:\n"
            "1. –£ –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ API Wildberries\n"
            "2. API –∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω\n"
            "3. –ö–ª—é—á –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤",
            reply_markup=get_main_menu_keyboard()
        )
    finally:
        await state.clear()

async def show_api_keys_message(message: Message, db: Database) -> None:
    """Show API keys for message."""
    user_data = await db.get_user(message.from_user.id)
    if not user_data:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    await message.answer(
        await format_api_keys_message(user_data),
        reply_markup=get_api_key_keyboard()
    )

@router.callback_query(F.data == "settings")
async def process_settings(callback: CallbackQuery):
    """Handle settings button press."""
    await callback.message.edit_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ü–∏–π:",
        reply_markup=get_settings_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data.startswith("interval:"))
async def process_interval_change(callback: CallbackQuery, db: Database):
    """Handle interval change."""
    hours = int(callback.data.split(":")[1])
    
    try:
        await db.update_check_interval(callback.from_user.id, hours)
        await callback.message.edit_text(
            f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: –∫–∞–∂–¥—ã–µ {hours} {'—á–∞—Å' if hours == 1 else '—á–∞—Å–∞' if 2 <= hours <= 4 else '—á–∞—Å–æ–≤'}",
            reply_markup=get_main_menu_keyboard()
        )
    except Exception as e:
        await callback.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )
    
    await callback.answer()

@router.callback_query(F.data == "back_to_main")
async def process_back_to_main(callback: CallbackQuery) -> None:
    """Handle back to main menu."""
    await callback.message.edit_text(
        format_start_message(True),
        reply_markup=get_start_keyboard()
    )
    await callback.answer()

@router.message(Command("unsubscribe"))
async def cmd_unsubscribe(message: Message, db: Database) -> None:
    """Handle /unsubscribe command."""
    user_data = await db.get_user(message.from_user.id)
    if not user_data:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
        
    await message.answer(
        "‚ùóÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=get_confirmation_keyboard()
    )

@router.message(Command("delete_data"))
@router.callback_query(F.data == "delete_data")
async def cmd_delete_data(event: Union[Message, CallbackQuery], state: FSMContext):
    """Handle /delete_data command and delete_data button."""
    if isinstance(event, CallbackQuery):
        await event.message.edit_text(
            "‚ùóÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ API –∫–ª—é—á–∏?\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            reply_markup=get_confirmation_keyboard()
        )
    else:
        await event.answer(
            "‚ùóÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ API –∫–ª—é—á–∏?\n"
            "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
            reply_markup=get_confirmation_keyboard()
        )
    await state.set_state(UserStates.waiting_for_confirmation)
    await state.update_data(action="delete_keys")

@router.callback_query(F.data == "subscribe")
async def process_subscribe(callback: CallbackQuery) -> None:
    """Handle subscription request."""
    await callback.message.edit_text(
        "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_subscription_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "pay_subscription")
async def process_payment(callback: CallbackQuery, db: Database) -> None:
    """Handle payment request."""
    await callback.message.edit_text(
        "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
        "1Ô∏è‚É£ –ú–µ—Å—è—Ü - 299‚ÇΩ\n"
        "3Ô∏è‚É£ –ú–µ—Å—è—Ü–∞ - 799‚ÇΩ\n"
        "6Ô∏è‚É£ –ú–µ—Å—è—Ü–µ–≤ - 1499‚ÇΩ\n"
        "1Ô∏è‚É£2Ô∏è‚É£ –ú–µ—Å—è—Ü–µ–≤ - 2699‚ÇΩ",
        reply_markup=get_subscription_plans_keyboard()
    )
    await callback.answer()

@router.callback_query(F.data == "cancel_subscription")
async def process_cancel_subscription(
    callback: CallbackQuery,
    db: Database
) -> None:
    """Handle subscription cancellation."""
    try:
        await db.update_subscription(
            callback.from_user.id,
            status="inactive",
            end_date=datetime.now()
        )
        await callback.message.edit_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    except Exception as e:
        await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    await callback.answer()

@router.callback_query(F.data == "confirm")
async def process_confirmation(
    callback: CallbackQuery,
    state: FSMContext,
    db: Database
) -> None:
    """Handle confirmation of dangerous actions."""
    current_state = await state.get_state()
    if current_state == UserStates.waiting_for_confirmation:
        state_data = await state.get_data()
        action = state_data.get("action")
        
        if action == "delete_keys":
            try:
                await db.clear_api_keys(callback.from_user.id)
                await callback.message.edit_text(
                    "‚úÖ –í—Å–µ API –∫–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã"
                )
            except Exception as e:
                await callback.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        
        await state.clear()
    await callback.answer()

@router.callback_query(F.data == "cancel")
async def process_cancellation(
    callback: CallbackQuery,
    state: FSMContext
) -> None:
    """Handle cancellation of dangerous actions."""
    await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await state.clear()
    await callback.answer()

@router.message(Command("menu"))
async def cmd_menu(message: Message, db: Database):
    """Show main menu."""
    user_data = await db.get_user(message.from_user.id)
    if not user_data:
        await db.add_user(message.from_user.id)
    
    await message.answer(
        "ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é PriceGuard\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu_keyboard()
    )

@router.callback_query(F.data == "my_promotions")
async def show_promotions(callback: CallbackQuery, db: Database):
    """Show user's promotions."""
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    await callback.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–µ–π
    user_data = await db.get_user(callback.from_user.id)
    if not user_data:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á–∏", show_alert=True)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–π
    has_wb = bool(user_data.get("wildberries_api_key"))
    has_ozon = bool(user_data.get("ozon_api_key") and user_data.get("ozon_client_id"))
    
    if not (has_wb or has_ozon):
        text = (
            "üìä *–í–∞—à–∏ –∞–∫—Ü–∏–∏*\n\n"
            "‚ùå –£ –≤–∞—Å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã API –∫–ª—é—á–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ü–∏–∏"
        )
    else:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö) –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        check_interval = user_data.get("check_interval", 14400)  # 4 —á–∞—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        interval_hours = check_interval // 3600  # –ø–µ—Ä–µ–≤–æ–¥–∏–º —Å–µ–∫—É–Ω–¥—ã –≤ —á–∞—Å—ã
        
        text = "üìä *–í–∞—à–∏ –∞–∫—Ü–∏–∏*\n\n"
        
        if has_wb:
            text += "üü£ *Wildberries*\n"
            text += f"‚îî –ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ü–∏–∏ –∫–∞–∂–¥—ã–µ {interval_hours} —á–∞—Å–∞\n"
            text += "‚îî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö\n\n"
            
        if has_ozon:
            text += "üîµ *OZON*\n"
            text += f"‚îî –ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ü–∏–∏ –∫–∞–∂–¥—ã–µ {interval_hours} —á–∞—Å–∞\n"
            text += "‚îî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö\n"

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è
    if callback.message.text != text:
        await callback.message.edit_text(
            text,
            reply_markup=get_main_menu_keyboard(),
            parse_mode="Markdown"
        )
    else:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await callback.answer()

@router.callback_query(F.data == "settings")
async def show_settings(callback: CallbackQuery):
    """Show settings menu."""
    await callback.message.edit_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=get_settings_keyboard()
    )

@router.callback_query(F.data == "subscription")
async def show_subscription(callback: CallbackQuery, db: Database):
    """Show subscription info."""
    user_data = await db.get_user(callback.from_user.id)
    if not user_data:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    status_text = await format_subscription_status(user_data)
    await callback.message.edit_text(
        status_text,
        reply_markup=get_subscription_keyboard()
    )

@router.callback_query(F.data == "api_keys")
async def show_api_keys(callback: CallbackQuery, db: Database):
    """Show API keys management."""
    user_data = await db.get_user(callback.from_user.id)
    if not user_data:
        await callback.message.edit_text(
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start",
            reply_markup=get_start_keyboard()
        )
        return
        
    await callback.message.edit_text(
        await format_api_keys_message(user_data),
        reply_markup=get_api_key_keyboard()
    )

@router.callback_query(F.data == "check_interval")
async def show_check_interval(callback: CallbackQuery):
    """Show check interval settings."""
    await callback.message.edit_text(
        "‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ü–∏–π\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ —á–∞—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∞–∫—Ü–∏–∏:",
        reply_markup=get_settings_keyboard()
    )

@router.callback_query(F.data == "help")
async def show_help(callback: CallbackQuery):
    """Show help message."""
    help_text = format_help_message()
    await callback.message.edit_text(
        help_text,
        reply_markup=get_main_menu_keyboard()
    )

@router.callback_query(F.data == "check_api_status")
async def check_api_status(
    callback: CallbackQuery,
    db: Database,
    marketplace_factory: MarketplaceFactory
):
    """Handle API status check."""
    user_data = await db.get_user(callback.from_user.id)
    if not user_data:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ API –∫–ª—é—á–∏", show_alert=True)
        return
        
    # Check if any keys are present
    if not (user_data.get('ozon_api_key') or user_data.get('wildberries_api_key')):
        await callback.answer("‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω API –∫–ª—é—á", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üîÑ –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å API –∫–ª—é—á–µ–π...",
        reply_markup=None
    )
    
    # Get status message with validation
    status_message = await format_api_keys_message(user_data, marketplace_factory, validate=True)
    
    await callback.message.edit_text(
        status_message,
        reply_markup=get_api_key_keyboard()
    )
