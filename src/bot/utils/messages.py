"""
Message templates for the PriceGuard bot.
File: src/bot/utils/messages.py
"""

from typing import List, Dict, Optional
from datetime import datetime
from core.logging import get_logger
from services.marketplaces.factory import MarketplaceFactory

logger = get_logger(__name__)

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ API –∫–ª—é—á–∞–º
OZON_API_KEY_INSTRUCTION = """
üîë –î–æ–±–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞ Ozon

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞:
1. –ù–∞–∂–º–∏—Ç–µ üë§ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
2. –í—ã–±–µ—Ä–∏—Ç–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏
3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª Seller API (https://seller.ozon.ru/app/settings/api-keys)
4. –ù–∞–∂–º–∏—Ç–µ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á"
5. –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å "Admin read only"
6. –ù–∞–∂–º–∏—Ç–µ "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å"

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
CLIENT_ID:API_KEY

–ü—Ä–∏–º–µ—Ä:
12345:a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6

‚ùóÔ∏è –í–∞–∂–Ω–æ: –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫–ª—é—á —Ä–æ–≤–Ω–æ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –∏–Ω–∞—á–µ –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
"""

WILDBERRIES_API_KEY_INSTRUCTION = """
üîë –î–æ–±–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞ Wildberries

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞:
1. –í –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–º—è –ø—Ä–æ—Ñ–∏–ª—è
2. –í—ã–±–µ—Ä–∏—Ç–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –î–æ—Å—Ç—É–ø –∫ API (https://seller.wildberries.ru/supplier-settings/access-to-api)
3. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é "–¢–æ–ª—å–∫–æ –Ω–∞ —á—Ç–µ–Ω–∏–µ"
4. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ API:
   - –¶–µ–Ω—ã –∏ —Å–∫–∏–¥–∫–∏
   - –ö–∞–ª–µ–Ω–¥–∞—Ä—å –∞–∫—Ü–∏–π
5. –°–æ–∑–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω

–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.

‚ùóÔ∏è –í–∞–∂–Ω–æ: –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ —Å–∞–º —Ç–æ–∫–µ–Ω, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
"""

START_MESSAGE = """
üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ PriceGuard - —Å–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∞–∫—Ü–∏–π –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ Ozon –∏ Wildberries.

üîç –ú—ã –ø–æ–º–æ–∂–µ–º –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å, –∫–æ–≥–¥–∞ —Ç–æ–≤–∞—Ä—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –≥–æ—Ä—è—á–∏–µ –∞–∫—Ü–∏–∏.

‚ú® –ü–µ—Ä–≤—ã–µ 14 –¥–Ω–µ–π - –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –¥–æ 100 —Ç–æ–≤–∞—Ä–æ–≤.
"""

HOW_IT_WORKS_MESSAGE = """
PriceGuard –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:

‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞—à–∏ —Ç–æ–≤–∞—Ä—ã –Ω–∞ Ozon –∏ Wildberries
‚úÖ –°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤, –ø–æ–ø–∞–≤—à–∏—Ö –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∞–∫—Ü–∏–∏
‚úÖ –ü—Ä–∏—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö

–í–∞–º –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∞–∫—Ü–∏–∏!
"""

START_SETUP_MESSAGE = """
–î–ª—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –Ω—É–∂–Ω—ã API-–∫–ª—é—á–∏ Ozon –∏ Wildberries.

üîê –≠—Ç–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑–æ–ø–∞—Å–Ω–æ:

- –ö–ª—é—á–∏ —à–∏—Ñ—Ä—É—é—Ç—Å—è
- –í—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç–µ –∏—Ö –æ—Ç–æ–∑–≤–∞—Ç—å
- –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
"""

SETUP_COMPLETE_MESSAGE = """

üéâ –û—Ç–ª–∏—á–Ω–æ! –í–∞—à–∏ –∫–ª—é—á–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.

–°–µ—Ä–≤–∏—Å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∞–∫—Ü–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ 4 —Ä–∞–∑–∞ –≤ —Å—É—Ç–∫–∏.
–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏–¥—É—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç.

–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:
‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: 14
üì¶ –õ–∏–º–∏—Ç —Ç–æ–≤–∞—Ä–æ–≤: 100
"""

MENU_MESSAGE = """
ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é PriceGuard

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""

def format_start_message(is_registered: bool = False) -> str:
    """Format start command message."""
    if is_registered:
        return (
            "üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ PriceGuard!\n\n"
            "PriceGuard - –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ Ozon –∏ Wildberries. "
            "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Ü–µ–Ω—ã –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        )
    else:
        return (
            START_MESSAGE + "\n\n" +
            HOW_IT_WORKS_MESSAGE + "\n\n" +
            START_SETUP_MESSAGE
        )

def format_help_message() -> str:
    """Format help command message."""
    return (
        "‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/menu - –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n"
        "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "/add_api - –î–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á–∏\n"
        "/delete_data - –£–¥–∞–ª–∏—Ç—å –≤—Å–µ API –∫–ª—é—á–∏\n\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @kagitin"
    )

async def format_subscription_status(user_data: Dict) -> str:
    """Format subscription status message."""
    subscription_status = user_data.get('subscription_status', 'inactive')
    subscription_end_date = user_data.get('subscription_end_date')
    created_at = user_data.get('created_at')
    
    if subscription_status == 'active' and subscription_end_date:
        status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞"
        try:
            end_date = datetime.fromisoformat(subscription_end_date)
            created = datetime.fromisoformat(created_at)
            days_left = (end_date - datetime.now()).days
            
            created_text = f"–î–∞—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {created.strftime('%d.%m.%Y %H:%M')}\n"
            expires_text = f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date.strftime('%d.%m.%Y %H:%M')}\n"
            days_text = f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}"
        except (ValueError, TypeError):
            created_text = ""
            expires_text = ""
            days_text = ""
    elif subscription_status == 'trial':
        status = "üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
        created_text = ""
        expires_text = ""
        days_text = ""
    else:
        status = "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
        created_text = ""
        expires_text = ""
        days_text = ""
    
    return (
        f"üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
        f"–°—Ç–∞—Ç—É—Å: {status}\n"
        f"{created_text}"
        f"{expires_text}"
        f"{days_text}"
    )

def format_promo_update(
    marketplace: str,
    old_count: int,
    new_count: int,
    details: List[Dict]
) -> str:
    """Format promotion update message."""
    diff = new_count - old_count
    if diff == 0:
        return f"‚ÑπÔ∏è {marketplace}: –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∞–∫—Ü–∏—è—Ö –Ω–µ—Ç"
        
    emoji = "üî∫" if diff > 0 else "üîª"
    msg = [f"{emoji} {marketplace}: {abs(diff)} —Ç–æ–≤–∞—Ä(–æ–≤) {diff > 0 and '–¥–æ–±–∞–≤–ª–µ–Ω–æ –≤' or '—É–±—Ä–∞–Ω–æ –∏–∑'} –∞–∫—Ü–∏–π"]
    
    if details:
        msg.append("\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:")
        for item in details:
            if marketplace == "Ozon":
                msg.append(
                    f"‚Ä¢ {item['name']}\n"
                    f"  –¶–µ–Ω–∞ –ø–æ –∞–∫—Ü–∏–∏: {item['action_price']}‚ÇΩ\n"
                    f"  –î–∞—Ç–∞ –∞–∫—Ü–∏–∏: {item['date_promo']}"
                )
            else:  # Wildberries
                msg.append(
                    f"‚Ä¢ {item['name']}\n"
                    f"  –ê–∫—Ü–∏—è: {item['promotion_name']}\n"
                    f"  –ü–µ—Ä–∏–æ–¥: {item['start_date']} - {item['end_date']}"
                )
                
    return "\n".join(msg)

def format_api_instructions(marketplace: str) -> str:
    """Format API key instructions message."""
    if marketplace.lower() == "ozon":
        return OZON_API_KEY_INSTRUCTION
    return WILDBERRIES_API_KEY_INSTRUCTION

def format_user_info(user: Dict) -> str:
    """Format user info message."""
    ozon_key = "‚úÖ" if user.get("ozon_api_key") and user.get("ozon_client_id") else "‚ùå"
    wb_key = "‚úÖ" if user.get("wildberries_api_key") else "‚ùå"
    
    status = user.get("subscription_status", "trial")
    if status == "active":
        status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞"
    elif status == "trial":
        status = "üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
    else:
        status = "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
    
    created_at = user.get("created_at")
    if created_at:
        try:
            created_at = datetime.fromisoformat(created_at).strftime("%d.%m.%Y %H:%M")
        except (ValueError, TypeError):
            created_at = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    end_date = user.get("subscription_end_date")
    if end_date:
        try:
            end_date = datetime.fromisoformat(end_date).strftime("%d.%m.%Y")
        except (ValueError, TypeError):
            end_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    else:
        end_date = "–ù–µ—Ç"
    
    interval = user.get("check_interval", 14400)
    interval_min = interval // 360
    
    return (
        f"üë§ ID: `{user.get('user_id')}`\n"
        f"‚îú API Ozon: {ozon_key}\n"
        f"‚îú API WB: {wb_key}\n"
        f"‚îú –ü–æ–¥–ø–∏—Å–∫–∞: {status}\n"
        f"‚îú –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date}\n"
        f"‚îú –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {created_at}\n"
        f"‚îî –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {interval_min} –º–∏–Ω"
    )

def format_subscription_info(sub: Dict) -> str:
    """Format subscription info message."""
    status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if sub.get("is_active") else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    try:
        start_date = datetime.fromisoformat(sub.get('start_date')).strftime("%d.%m.%Y")
        end_date = datetime.fromisoformat(sub.get('end_date')).strftime("%d.%m.%Y")
    except (ValueError, TypeError):
        start_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        end_date = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    months = (datetime.fromisoformat(sub.get('end_date')) - 
              datetime.fromisoformat(sub.get('start_date'))).days // 30
    tariff_names = {
        1: "–ë–∞–∑–æ–≤—ã–π (1 –º–µ—Å—è—Ü)",
        3: "–°—Ç–∞–Ω–¥–∞—Ä—Ç (3 –º–µ—Å—è—Ü–∞)",
        6: "–ü—Ä–µ–º–∏—É–º (6 –º–µ—Å—è—Ü–µ–≤)",
        12: "VIP (12 –º–µ—Å—è—Ü–µ–≤)"
    }
    tariff = tariff_names.get(months, f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {months} –º–µ—Å.")
    
    return (
        "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞\n\n"
        f"`–¢–∞—Ä–∏—Ñ:` {tariff}\n"
        f"`–°—Ç–∞—Ç—É—Å:` {status}\n"
        f"`–ù–∞—á–∞–ª–æ:` {start_date}\n"
        f"`–û–∫–æ–Ω—á–∞–Ω–∏–µ:` {end_date}"
    )

def format_payment_info(payment: Dict) -> str:
    """Format payment info message."""
    status_map = {
        "pending": "üïí –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã",
        "waiting_for_capture": "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è",
        "succeeded": "‚úÖ –û–ø–ª–∞—á–µ–Ω",
        "canceled": "‚ùå –û—Ç–º–µ–Ω–µ–Ω"
    }
    
    return (
        f"üí≥ *–ü–ª–∞—Ç–µ–∂ #{payment.get('id')}*\n"
        f"*–°—Ç–∞—Ç—É—Å:* {status_map.get(payment.get('status'), '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"*–°—É–º–º–∞:* {payment.get('amount')} {payment.get('currency')}\n"
        f"*–î–∞—Ç–∞:* {payment.get('created_at')}"
    )

async def validate_marketplace_keys(user_data: Dict, marketplace_factory: MarketplaceFactory) -> Dict[str, bool]:
    """Validate marketplace API keys.
    
    Returns:
        Dict with validation status for each marketplace
    """
    results = {
        "ozon": False,
        "wildberries": False
    }
    
    # Check Ozon keys
    if user_data.get('ozon_api_key') and user_data.get('ozon_client_id'):
        try:
            # –ü–µ—Ä–µ–¥–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –Ω–∞–ø—Ä—è–º—É—é
            ozon_client = await marketplace_factory.create_client(
                'ozon',
                user_data['ozon_api_key'],
                client_id=user_data['ozon_client_id'],
                is_encrypted=True
            )
            async with ozon_client:
                results["ozon"] = await ozon_client.validate_api_key()
        except Exception as e:
            logger.error(f"Ozon validation error: {str(e)}")
    
    # Check Wildberries key
    if user_data.get('wildberries_api_key'):
        try:
            # –ü–µ—Ä–µ–¥–∞–µ–º –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –Ω–∞–ø—Ä—è–º—É—é
            wb_client = await marketplace_factory.create_client(
                'wildberries',
                user_data['wildberries_api_key'],
                is_encrypted=True
            )
            async with wb_client:
                results["wildberries"] = await wb_client.validate_api_key()
        except Exception as e:
            logger.error(f"Wildberries validation error: {str(e)}")
    
    return results

async def format_api_keys_message(user_data: Dict, marketplace_factory: Optional[MarketplaceFactory] = None, validate: bool = False) -> str:
    """Format API keys message."""
    ozon_key = user_data.get('ozon_api_key', '')
    ozon_client_id = user_data.get('ozon_client_id', '')
    wb_key = user_data.get('wildberries_api_key', '')
    
    if validate and marketplace_factory:
        validation_results = await validate_marketplace_keys(user_data, marketplace_factory)
        ozon_status = "‚úÖ" if validation_results["ozon"] else "‚ùå"
        wb_status = "‚úÖ" if validation_results["wildberries"] else "‚ùå"
    else:
        # Basic presence check
        ozon_status = "‚úÖ" if ozon_key and ozon_client_id else "‚ùå"
        wb_status = "‚úÖ" if wb_key else "‚ùå"
    
    return (
        "üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞–º–∏\n\n"
        f"OZON API: {ozon_status}\n"
        f"Wildberries API: {wb_status}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
    )
